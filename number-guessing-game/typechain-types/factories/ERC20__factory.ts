/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { ERC20, ERC20Interface } from "../ERC20";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "delegate",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "delegate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "numTokens",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenOwner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "numTokens",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "numTokens",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405269021e19e0c9bab240000060025534801561001e57600080fd5b506002546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611497806100b46000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce5671461013457806370a082311461015257806395d89b4114610182578063a9059cbb146101a0578063dd62ed3e146101d057610093565b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100e657806323b872dd14610104575b600080fd5b6100a0610200565b6040516100ad9190610e0c565b60405180910390f35b6100d060048036038101906100cb9190610ec7565b610239565b6040516100dd9190610f22565b60405180910390f35b6100ee610336565b6040516100fb9190610f4c565b60405180910390f35b61011e60048036038101906101199190610f67565b610340565b60405161012b9190610f22565b60405180910390f35b61013c610712565b6040516101499190610fd6565b60405180910390f35b61016c60048036038101906101679190610ff1565b610717565b6040516101799190610f4c565b60405180910390f35b61018a610803565b6040516101979190610e0c565b60405180910390f35b6101ba60048036038101906101b59190610ec7565b61083c565b6040516101c79190610f22565b60405180910390f35b6101ea60048036038101906101e5919061101e565b610a46565b6040516101f79190610f4c565b60405180910390f35b6040518060400160405280601581526020017f4f62736375726f204775657373696e672047616d65000000000000000000000081525081565b60006102453383610b71565b5081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516103249190610f4c565b60405180910390a36001905092915050565b6000600254905090565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156103c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ba906110d0565b60405180910390fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115610482576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047990611162565b60405180910390fd5b816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104cc91906111b1565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461059691906111b1565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461066091906111e5565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106ff9190610f4c565b60405180910390a3600190509392505050565b600081565b60008173ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16148061077e57508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6107bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b49061128b565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6040518060400160405280600381526020017f4f4747000000000000000000000000000000000000000000000000000000000081525081565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156108bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b69061131d565b60405180910390fd5b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461090991906111b1565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461099591906111e5565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a349190610f4c565b60405180910390a36001905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161480610aad57508173ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b610aec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae3906113af565b60405180910390fd5b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115610c16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0d90611441565b60405180910390fd5b81600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c8291906111b1565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d3091906111e5565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610db6578082015181840152602081019050610d9b565b60008484015250505050565b6000601f19601f8301169050919050565b6000610dde82610d7c565b610de88185610d87565b9350610df8818560208601610d98565b610e0181610dc2565b840191505092915050565b60006020820190508181036000830152610e268184610dd3565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e5e82610e33565b9050919050565b610e6e81610e53565b8114610e7957600080fd5b50565b600081359050610e8b81610e65565b92915050565b6000819050919050565b610ea481610e91565b8114610eaf57600080fd5b50565b600081359050610ec181610e9b565b92915050565b60008060408385031215610ede57610edd610e2e565b5b6000610eec85828601610e7c565b9250506020610efd85828601610eb2565b9150509250929050565b60008115159050919050565b610f1c81610f07565b82525050565b6000602082019050610f376000830184610f13565b92915050565b610f4681610e91565b82525050565b6000602082019050610f616000830184610f3d565b92915050565b600080600060608486031215610f8057610f7f610e2e565b5b6000610f8e86828701610e7c565b9350506020610f9f86828701610e7c565b9250506040610fb086828701610eb2565b9150509250925092565b600060ff82169050919050565b610fd081610fba565b82525050565b6000602082019050610feb6000830184610fc7565b92915050565b60006020828403121561100757611006610e2e565b5b600061101584828501610e7c565b91505092915050565b6000806040838503121561103557611034610e2e565b5b600061104385828601610e7c565b925050602061105485828601610e7c565b9150509250929050565b7f4552433230207472616e736665722066726f6d206d757374206265206c65737360008201527f207468616e2062616c616e63652e000000000000000000000000000000000000602082015250565b60006110ba602e83610d87565b91506110c58261105e565b604082019050919050565b600060208201905081810360008301526110e9816110ad565b9050919050565b7f4552433230207472616e736665722066726f6d206d757374206265206c65737360008201527f207468616e20616c6c6f77616e63652e00000000000000000000000000000000602082015250565b600061114c603083610d87565b9150611157826110f0565b604082019050919050565b6000602082019050818103600083015261117b8161113f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006111bc82610e91565b91506111c783610e91565b92508282039050818111156111df576111de611182565b5b92915050565b60006111f082610e91565b91506111fb83610e91565b925082820190508082111561121357611212611182565b5b92915050565b7f4f6e6c792074686520746f6b656e206f776e65722063616e207365652074686560008201527f2062616c616e63652e0000000000000000000000000000000000000000000000602082015250565b6000611275602983610d87565b915061128082611219565b604082019050919050565b600060208201905081810360008301526112a481611268565b9050919050565b7f4552433230207472616e73666572206d757374206265206c657373207468616e60008201527f2062616c616e63652e0000000000000000000000000000000000000000000000602082015250565b6000611307602983610d87565b9150611312826112ab565b604082019050919050565b60006020820190508181036000830152611336816112fa565b9050919050565b7f4f6e6c792074686520746f6b656e206f776e6572206f722064656c656761746560008201527f2063616e207365652074686520616c6c6f77616e63652e000000000000000000602082015250565b6000611399603783610d87565b91506113a48261133d565b604082019050919050565b600060208201905081810360008301526113c88161138c565b9050919050565b7f45524332302061737369676e6d656e74206d757374206265206c65737320746860008201527f616e2074686520636f6e74726163742063726561746f722062616c616e63652e602082015250565b600061142b604083610d87565b9150611436826113cf565b604082019050919050565b6000602082019050818103600083015261145a8161141e565b905091905056fea2646970667358221220edc0d8bdfd773b13544bdf55d3ee75d6892a5646efd3ecf7fa0528d5bc5901f264736f6c63430008110033";

type ERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20__factory extends ContractFactory {
  constructor(...args: ERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20> {
    return super.deploy(overrides || {}) as Promise<ERC20>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC20 {
    return super.attach(address) as ERC20;
  }
  override connect(signer: Signer): ERC20__factory {
    return super.connect(signer) as ERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20Interface {
    return new utils.Interface(_abi) as ERC20Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ERC20 {
    return new Contract(address, _abi, signerOrProvider) as ERC20;
  }
}
